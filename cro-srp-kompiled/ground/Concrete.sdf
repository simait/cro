%% Grammar for the K language
module Concrete
imports Common %% For Comments and whitespace
imports KTechnique
imports KBuiltinsBasic
imports Integration


exports
context-free start-symbols
	StartDz RuleContentDz

context-free syntax
	KSentence+	-> StartDz {cons("KSentenceList")}
	%% K Sentences
	%%"macro" Bag "=" Bag		-> KSimpleSentence {cons("Macro")}
	"configuration" Bag			-> KSentence {cons("Config")}
	"rule" LabelDz RuleContentDz-> KSimpleSentence {cons("Rule")}
	"context" K					-> KSimpleSentence {cons("Context")}
	%%"predicate" K				-> KSimpleSentence {cons("Predicate")}
	
	KList		-> RuleContentDz
	Map			-> RuleContentDz
	Bag			-> RuleContentDz
	Set			-> RuleContentDz
	List		-> RuleContentDz
	KLabel		-> RuleContentDz


	KSimpleSentence "when" K "[" TagListDz "]"-> KSentence {cons("AttributedCondSentence"), prefer}
	KSimpleSentence "when" K				-> KSentence {cons("CondSentence")}
	KSimpleSentence "[" TagListDz "]"		-> KSentence {cons("AttributedSentence")}
	KSimpleSentence							-> KSentence {avoid}
	

	"<" CellLabel CellProperty* ">" ADz "</" CellLabel ">"	-> BagItem {cons("Bag1ClosedCell")}
	"..." BDz			-> ADz {cons("LeftCell")}
	BDz					-> ADz {avoid}
	CellContents "..."	-> BDz {cons("RightCell")}
	CellContents		-> BDz {avoid}
	
	"<br" "/>"			-> BagItem {cons("BagItem1Break")}


	K		-> CellContents %%{cons("K")}
	Map		-> CellContents %%{cons("Map")}
	Bag		-> CellContents %%{cons("Bag")}
	Set		-> CellContents %%{cons("Set")}
	List	-> CellContents %%{cons("List")}

	DzDzID "=" DzDzSTRING -> CellProperty {cons("CellProperty")}
	%%CellProperty* -> CellProperties %%{cons("CellProperties")}

	CellLabel "=>" CellLabel	-> CellLabel {non-assoc, cons("CellLabelRewrite")}

						-> LabelDz {cons("NoLabel")}
	"[" LABELDz "]" ":"	-> LabelDz {cons("Label")}


	%%						-> TagListDz {cons("NoTags")}
	TagDz					-> TagListDz
	TagListDz "," TagListDz -> TagListDz {left, cons("TagList")}
	

	KEYDz							-> TagDz {cons("Tag")}
	KEYDz "(" TAGCONTENTDz ")"		-> TagDz {cons("TagParam")}
	KEYDz "(" DzDzSTRING ")"		-> TagDz {cons("TagString")}
lexical syntax
	[A-Za-z\-0-9]			-> TAGDz
	[a-z] TAGDz+			-> KEYDz
	TCDz*					-> TAGCONTENTDz
	~[\n\r\(\)\"]			-> TCDz
	"(" TAGCONTENTDz ")"	-> TCDz

lexical restrictions
	TAGCONTENTDz	-/- ~[\(\)]
	KEYDz			-/- [A-Za-z\-0-9]

lexical syntax
	[A-Z][a-zA-Z0-9]* -> BASICID
	[A-Za-z] ~[\<\>\_\ \n\r\t]*	-> DzCellLabel
	DzCellLabel				-> CellLabel
	[A-Z\-]+				-> ModName
	~[\[\]\_\ \n\r\t]+		-> LABELDz

lexical restrictions
	BASICID 	-/- [a-zA-Z0-9\{\}]
	CellLabel	-/- ~[\<\>\_\ \t\n\r]
	LABELDz		-/- ~[\[\]\_\ \n\r\t]
	ModName		-/- [A-Z\-]



