module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

exports

context-free syntax
context-free priorities
{
	"notBool" Bool -> Bool {left, cons("Bool10Syn")}
} > {
	Bool "andBool" Bool -> Bool {left, cons("Bool12Syn")}
	Bool "andThenBool" Bool -> Bool {left, cons("Bool13Syn")}
} > {
	Bool "xorBool" Bool -> Bool {left, cons("Bool14Syn")}
} > {
	Bool "orBool" Bool -> Bool {left, cons("Bool15Syn")}
	Bool "orElseBool" Bool -> Bool {left, cons("Bool16Syn")}
} > {
	Bool "impliesBool" Bool -> Bool {left, cons("Bool17Syn")}
} > { left:
	Bool "==Bool" Bool -> Bool {left, cons("Bool18Syn")}
	Bool "=/=Bool" Bool -> Bool {left, cons("Bool19Syn")}
}

context-free priorities
{ left:
	K "==K" K -> Bool {cons("Bool120Syn")}
	K "=/=K" K -> Bool {cons("Bool122Syn")}
}

context-free priorities
{
	K "==K" K -> Bool {cons("Bool120Syn")}
	K "=/=K" K -> Bool {cons("Bool122Syn")}
} > {
	"notBool" Bool -> Bool {left, cons("Bool10Syn")}
	Bool "impliesBool" Bool -> Bool {left, cons("Bool17Syn")}
	Bool "andThenBool" Bool -> Bool {left, cons("Bool13Syn")}
	Bool "orBool" Bool -> Bool {left, cons("Bool15Syn")}
	Bool "xorBool" Bool -> Bool {left, cons("Bool14Syn")}
	Bool "orElseBool" Bool -> Bool {left, cons("Bool16Syn")}
	Bool "andBool" Bool -> Bool {left, cons("Bool12Syn")}
}

context-free priorities
{ right:
	"~Int" Int -> Int {right, cons("Int147Syn")}
} > { left:
	Int "^Int" Int -> Int {left, cons("Int148Syn")}
} > { left:
	Int "*Int" Int -> Int {left, cons("Int149Syn")}
	Int "/Int" Int -> Int {left, cons("Int150Syn")}
	Int "%Int" Int -> Int {left, cons("Int152Syn")}
	Int "divInt" Int -> Int {left, cons("Int153Syn")}
	Int "modInt" Int -> Int {left, cons("Int154Syn")}
} > { left:
	Int "+Int" Int -> Int {left, cons("Int1PlusSyn")}
	Int "-Int" Int -> Int {left, cons("Int155Syn")}
} > { left:
	Int ">>Int" Int -> Int {left, cons("Int156Syn")}
	Int "<<Int" Int -> Int {left, cons("Int157Syn")}
} > { left:
	Int "&Int" Int -> Int {left, cons("Int158Syn")}
} > { left:
	Int "xorInt" Int -> Int {left, cons("Int159Syn")}
} > { left:
	Int "|Int" Int -> Int {left, cons("Int160Syn")}
}

context-free priorities
{
	Float "^Float" Float -> Float {left, cons("Float177Syn")}
} > { left:
	Float "*Float" Float -> Float {left, cons("Float178Syn")}
	Float "/Float" Float -> Float {left, cons("Float179Syn")}
	Float "%Float" Float -> Float {left, cons("Float180Syn")}
} > { left:
	Float "+Float" Float -> Float {left, cons("Float182Syn")}
	Float "-Float" Float -> Float {left, cons("Float183Syn")}
}

context-free priorities
{ left:
	Float "<=Float" Float -> Bool {left, cons("Bool184Syn")}
	Float "<Float" Float -> Bool {left, cons("Bool185Syn")}
	Float ">=Float" Float -> Bool {left, cons("Bool186Syn")}
	Float ">Float" Float -> Bool {left, cons("Bool187Syn")}
	Float "==Float" Float -> Bool {left, cons("Bool188Syn")}
	Float "=/=Float" Float -> Bool {left, cons("Bool189Syn")}
}

%% subsorts 1
context-free priorities
{
	Bool -> K
	Method -> K
	LocationValue -> K
	Ddecl -> K
	DzId -> K
	Cmd -> K
	Array -> K
	CapitalizedId -> K
	Module -> K
	MessageClosure -> K
	DzFloat -> K
	TCPAnswer -> K
	DzString -> K
	Exp -> K
	DzInt -> K
	Int -> K
	Ids -> K
	DzBool -> K
	StoreValue -> K
	Object -> K
	Exps -> K
	Values -> K
	Float -> K
	Nat -> K
	Cmds -> K
	Value -> K
	Variable -> K
	Location -> K
	Char -> K
	ObjectState -> K
	String -> K
	Id -> K
} .> {
	String -> TCPAnswer
	Value -> Exp
	DzFloat -> Float
	ObjectState -> Value
	Exp -> Exps
	Values -> Exps
	DzBool -> Bool
	Bool -> Value
	Object -> Value
	Location -> StoreValue
	String -> Value
	Int -> Value
	Value -> StoreValue
	Value -> Values
	MessageClosure -> Value
	DzId -> Id
	Method -> Value
	Id -> Variable
	DzString -> String
	Id -> Exp
	DzInt -> Int
	Id -> Ids
	LocationValue -> Value
	Ddecl -> Cmd
	Cmd -> Cmds
	Ids -> Exps
} .> {
	K -> Bool
	K -> Method
	K -> LocationValue
	K -> Ddecl
	K -> DzId
	K -> Cmd
	K -> Array
	K -> CapitalizedId
	K -> Module
	K -> MessageClosure
	K -> DzFloat
	K -> TCPAnswer
	K -> DzString
	K -> Exp
	K -> DzInt
	K -> Int
	K -> Ids
	K -> DzBool
	K -> StoreValue
	K -> Object
	K -> Exps
	K -> Values
	K -> Float
	K -> Nat
	K -> Cmds
	K -> Value
	K -> Variable
	K -> Location
	K -> Char
	K -> ObjectState
	K -> String
	K -> Id
}

%% subsorts 1a
context-free priorities
{
	Bool -> K
	Method -> K
	LocationValue -> K
	Ddecl -> K
	DzId -> K
	Cmd -> K
	Array -> K
	CapitalizedId -> K
	Module -> K
	MessageClosure -> K
	DzFloat -> K
	TCPAnswer -> K
	DzString -> K
	Exp -> K
	DzInt -> K
	Int -> K
	Ids -> K
	DzBool -> K
	StoreValue -> K
	Object -> K
	Exps -> K
	Values -> K
	Float -> K
	Nat -> K
	Cmds -> K
	Value -> K
	Variable -> K
	Location -> K
	Char -> K
	ObjectState -> K
	String -> K
	Id -> K
} .> {
	K -> Bool
	K -> Method
	K -> LocationValue
	K -> Ddecl
	K -> DzId
	K -> Cmd
	K -> Array
	K -> CapitalizedId
	K -> Module
	K -> MessageClosure
	K -> DzFloat
	K -> TCPAnswer
	K -> DzString
	K -> Exp
	K -> DzInt
	K -> Int
	K -> Ids
	K -> DzBool
	K -> StoreValue
	K -> Object
	K -> Exps
	K -> Values
	K -> Float
	K -> Nat
	K -> Cmds
	K -> Value
	K -> Variable
	K -> Location
	K -> Char
	K -> ObjectState
	K -> String
	K -> Id
}

%% subsorts 2
context-free priorities
{
	K -> Bool
	K -> Method
	K -> LocationValue
	K -> Ddecl
	K -> DzId
	K -> Cmd
	K -> Array
	K -> CapitalizedId
	K -> Module
	K -> MessageClosure
	K -> DzFloat
	K -> TCPAnswer
	K -> DzString
	K -> Exp
	K -> DzInt
	K -> Int
	K -> Ids
	K -> DzBool
	K -> StoreValue
	K -> Object
	K -> Exps
	K -> Values
	K -> Float
	K -> Nat
	K -> Cmds
	K -> Value
	K -> Variable
	K -> Location
	K -> Char
	K -> ObjectState
	K -> String
	K -> Id
} .> {
	Bool -> K
	Method -> K
	LocationValue -> K
	Ddecl -> K
	DzId -> K
	Cmd -> K
	Array -> K
	CapitalizedId -> K
	Module -> K
	MessageClosure -> K
	DzFloat -> K
	TCPAnswer -> K
	DzString -> K
	Exp -> K
	DzInt -> K
	Int -> K
	Ids -> K
	DzBool -> K
	StoreValue -> K
	Object -> K
	Exps -> K
	Values -> K
	Float -> K
	Nat -> K
	Cmds -> K
	Value -> K
	Variable -> K
	Location -> K
	Char -> K
	ObjectState -> K
	String -> K
	Id -> K
}
context-free syntax
	"#" K -> KLabel {cons("KLabel1290Syn")}
	"#string2Int" "(" InsertDzK ")" -> K {cons("K1422Syn")}
	Map "=/=Map" Map -> Bool {cons("Bool130Syn")}
	K "inVars" K -> Bool {cons("Bool1322Syn")}
	"#flush" "(" InsertDzInt ")" -> K {cons("K1399Syn")}
	"String2Int" "(" InsertDzString ")" -> Int {cons("Int1204Syn")}
	Int "=/=Int" Int -> Bool {left, cons("Bool170Syn")}
	"#substMap" "(" InsertDzMap ")" -> K {cons("K1350Syn")}
	String ">String" String -> Bool {cons("Bool1230Syn")}
	Id "=" "new" InsertDzExp "(" InsertDzExps ")" ";" -> Ddecl {cons("Ddecl1445Syn")}
	"#isTCPError" "(" InsertDzString ")" -> Bool {cons("Bool1245Syn")}
	"#tcpError" "(" InsertDzString ")" -> TCPAnswer {cons("TCPAnswer1239Syn")}
	"contextLeave" "(" InsertDzValue ")" -> K {cons("K1478Syn")}
	"#fReadChar" "(" InsertDzInt ")" -> K {cons("K1424Syn")}
	"lengthString" "(" InsertDzString ")" -> Int {cons("Int195Syn")}
	"getVariables" "(" InsertDzK ")" -> Set {cons("Set1302Syn")}
	K "[" InsertDzKList "/" InsertDzKList "]" -> K {cons("K1337Syn")}
	"#noIO" -> List {cons("List1430Syn")}
	Int -> Value {}
	"#stdout" -> Int {cons("Int1405Syn")}
	"contextsInit" "(" InsertDzValue ")" -> K {cons("K1473Syn")}
	"isVariable" "(" InsertDzMap ")" -> Bool {cons("Bool1375Syn")}
	"objectBindAddAll" "(" InsertDzIds "," InsertDzValues ")" -> K {cons("K1466Syn")}
	"#tell" "(" InsertDzInt ")" -> K {cons("K1393Syn")}
	String "==String" String -> Bool {left, cons("Bool194Syn")}
	"#splitedBinder" "(" InsertDzKList "," InsertDzKList "," InsertDzSet ")" -> K {cons("K1320Syn")}
	"#readChar" "(" ")" -> K {cons("K1423Syn")}
	"Set2KTerm" "(" InsertDzSet ")" -> K {cons("K1270Syn")}
	"#changeLabel" "(" InsertDzK "," InsertDzK ")" -> K {cons("K1359Syn")}
	"#patternMatch1" "(" InsertDzKList "," InsertDzMap ")" -> K {cons("K1298Syn")}
	K "[" InsertDzMap "]" -> K {cons("K1338Syn")}
	"#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K123Syn")}
	"isVariable" "(" InsertDzBag ")" -> Bool {cons("Bool1374Syn")}
	"Celllabel2K" CellLabel -> K {cons("K1284Syn")}
	KLabel "=KLabel" KLabel -> Bool {cons("Bool146Syn")}
	"#freeVars" "(" InsertDzKList "," InsertDzSet "," InsertDzSet ")" -> K {cons("K1332Syn")}
	"inferSRP" -> K {cons("K1493Syn")}
	"Set2KLabel" Set -> KLabel {cons("KLabel1278Syn")}
	"##tcpRequest" "(" InsertDzString ")" -> String {cons("String1243Syn")}
	"#tcpRequest" "(" InsertDzString ")" -> TCPAnswer {cons("TCPAnswer1240Syn")}
	Map "=Map" Map -> Bool {cons("Bool144Syn")}
	"#boundVars1" "(" InsertDzK ")" -> K {cons("K1324Syn")}
	"charString" "(" InsertDzInt ")" -> String {cons("String196Syn")}
	"#buffer" "(" InsertDzK ")" -> List {cons("List1IOBufferSyn")}
	"objectStateAdd" "(" InsertDzId "," InsertDzLocationValue ")" -> K {cons("K1467Syn")}
	"vars" "(" InsertDzSet ")" -> K {cons("K1299Syn")}
	Int -> K {}
	Int "==Int" Int -> Bool {left, cons("Bool169Syn")}
	"programEval" -> K {cons("K1490Syn")}
	"#binderSplit2" "(" InsertDzKLabel "," InsertDzInt "," InsertDzKList "," InsertDzKList "," InsertDzKList "," InsertDzSet "," InsertDzK ")" -> K {cons("K1327Syn")}
	"exists" InsertDzSet "." Bool -> Bool {cons("Bool1362Syn")}
	"minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int162Syn")}
	DzBool -> Bool {}
	"objectInterfaceAdd" "(" InsertDzId "," InsertDzLocationValue ")" -> K {cons("K1468Syn")}
	"Int2String" "(" InsertDzInt ")" -> String {cons("String1205Syn")}
	"#fPutByte" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1398Syn")}
	"KList2KLabel" KList -> KLabel {cons("KLabel1276Syn")}
	Location -> StoreValue {}
	"Map2K" Map -> K {cons("K1289Syn")}
	"#eval" Map -> Bag {cons("Bag1EvalSyn")}
	"#substitutePlainList1" "(" InsertDzK "," InsertDzMap "," InsertDzKList ")" -> K {cons("K1357Syn")}
	"#eof" "(" ")" -> K {cons("K1420Syn")}
	"#printChar" "(" InsertDzK ")" -> K {cons("K1426Syn")}
	"#isMapInK" "(" InsertDzK ")" -> Bool {cons("Bool1262Syn")}
	"objectPop" "(" ")" -> K {cons("K1472Syn")}
	"Map" "(" InsertDzKList "|->" InsertDzKList ")" -> Map {cons("Map1254Syn")}
	"#freshSym" "(" InsertDzK ")" -> K {cons("K1387Syn")}
	"#isDigit" "(" InsertDzChar ")" -> Bool {cons("Bool1235Syn")}
	"#substituteK" "(" InsertDzK "," InsertDzK ")" -> K {cons("K1339Syn")}
	"programParse" "(" InsertDzK ")" -> K {cons("K1452Syn")}
	"isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool1369Syn")}
	"SMTCall" "(" InsertDzString ")" -> String {cons("String1367Syn")}
	"#removeCharsUponAck" "(" InsertDzInt ")" -> List {cons("List1428Syn")}
	"rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1200Syn")}
	Int ">=Int" Int -> Bool {left, cons("Bool167Syn")}
	"asciiString" "(" InsertDzString ")" -> Int {cons("Int197Syn")}
	"checkSat" "(" InsertDzBool ")" -> String {cons("String1368Syn")}
	"class" InsertDzId "(" InsertDzExps ")" Cmd -> Ddecl {cons("Ddecl1448Syn")}
	KLabel "==KLabel" KLabel -> Bool {cons("Bool135Syn")}
	"freshVariables" "(" InsertDzSet "," InsertDzK ")" -> K {cons("K1358Syn")}
	"#ostream" "(" InsertDzInt ")" -> List {cons("List1OutputStreamSyn")}
	"isBound" "(" InsertDzKLabel "," InsertDzInt ")" -> Bool {cons("Bool1308Syn")}
	Int "<=Int" Int -> Bool {left, cons("Bool165Syn")}
	"#substitute" "(" InsertDzK "," InsertDzMap ")" -> K {cons("K1340Syn")}
	"K2SMTLib" "(" InsertDzK ")" -> String {cons("String1363Syn")}
	"#fReadByte" "(" InsertDzInt ")" -> K {cons("K1400Syn")}
	List "=/=List" List -> Bool {cons("Bool138Syn")}
	"KList2K" KList -> K {cons("K1285Syn")}
	"lengthList" List -> Int {cons("Int1273Syn")}
	"methodParamsBind" "(" InsertDzIds "," InsertDzValues ")" -> K {cons("K1487Syn")}
	K "in" Set -> Bool {cons("Bool1265Syn")}
	"isEmptySet" "(" InsertDzSet ")" -> Bool {cons("Bool1269Syn")}
	Int "<Int" Int -> Bool {left, cons("Bool166Syn")}
	"#parseToken" "(" InsertDzString "," InsertDzString ")" -> K {cons("K1236Syn")}
	DzFloat -> Float {}
	"#substituteBinder" "(" InsertDzK "," InsertDzMap "," InsertDzK ")" -> K {cons("K1345Syn")}
	"#fPeekByte" "(" InsertDzInt ")" -> K {cons("K1395Syn")}
	"objectClosure" "(" InsertDzBag ")" -> Object {cons("Object1454Syn")}
	Map "(" InsertDzK ")" -> K {cons("K1252Syn")}
	"decomposeMatching" "(" InsertDzKList "," InsertDzKList ")" -> KList {cons("KList1296Syn")}
	Bool -> Value {}
	"#ioError" "(" InsertDzString ")" -> K {cons("K1397Syn")}
	"#freshSymSort" "(" InsertDzString ")" -> K {cons("K1385Syn")}
	"objectState" "(" InsertDzId ")" -> ObjectState {cons("ObjectState1485Syn")}
	"#putByte" "(" InsertDzInt ")" -> K {cons("K1409Syn")}
	"{" InsertDzCmds "}" -> Cmd {cons("Cmd1437Syn")}
	"select" "(" InsertDzArray "," InsertDzInt ")" -> KResult {cons("KResult176Syn")}
	Value -> StoreValue {}
	"isSymbolicList" "(" InsertDzList ")" -> K {cons("K1378Syn")}
	MessageClosure -> Value {}
	"module" InsertDzId Cmd -> Module {cons("Module1450Syn")}
	"dummyNat" -> Nat {cons("Nat174Syn")}
	"#freshSubst" "(" InsertDzSet "," InsertDzSet "," InsertDzMap ")" -> K {cons("K1349Syn")}
	Id -> Exp {}
	"getMatching" "(" InsertDzKList "," InsertDzKList ")" -> Map {cons("Map1295Syn")}
	List "==List" List -> Bool {cons("Bool137Syn")}
	Set "=Set" Set -> Bool {cons("Bool142Syn")}
	"lookup" "(" InsertDzId ")" -> K {cons("K1475Syn")}
	K "=K" K -> Bool {cons("Bool139Syn")}
	"#freeVarsBinder1" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K1335Syn")}
	Set "=/=Set" Set -> Bool {cons("Bool127Syn")}
	"{" "}" -> Cmd {cons("Cmd1436Syn")}
	"fresh" "(" InsertDzK ")" -> Bool {cons("Bool1FreshSyn")}
	Ddecl -> Cmd {}
	"#open" "(" InsertDzString ")" -> K {cons("K1388Syn")}
	"absInt" "(" InsertDzInt ")" -> Int {cons("Int164Syn")}
	"#freshSubst1" "(" InsertDzSet "," InsertDzSet "," InsertDzMap "," InsertDzK "," InsertDzK ")" -> K {cons("K1354Syn")}
	"objectBindAdd" "(" InsertDzId "," InsertDzLocationValue ")" -> K {cons("K1465Syn")}
	Exp "," Exps -> Exps {cons("Exps1ListSyn")}
	".Exps" -> Exps {cons("Exps1Empty")}
	"A-Dummy-Capitalized-Id-Just-Because-We-Do-Not-Allow-Empty-Productions-Yet" -> CapitalizedId {cons("CapitalizedId1237Syn")}
	"#getVars1" "(" InsertDzKList "," InsertDzSet ")" -> K {cons("K1304Syn")}
	"root" -> Id {cons("Id1432Syn")}
	"#if" InsertDzBool "#then" InsertDzInt "#else" InsertDzInt "#fi" -> Int {cons("Int124Syn")}
	K "#inKList" KList -> Bool {cons("Bool1250Syn")}
	List "=List" List -> Bool {cons("Bool140Syn")}
	Map "==Map" Map -> Bool {cons("Bool129Syn")}
	KList "=/=KList" KList -> Bool {cons("Bool134Syn")}
	"keys" Map -> Set {cons("Set1256Syn")}
	"Bag2K" Bag -> K {cons("K1287Syn")}
	"#parse" "(" InsertDzString "," InsertDzK ")" -> List {cons("List1ParseSyn")}
	"#freshSymN" "(" InsertDzK "," InsertDzInt ")" -> K {cons("K1386Syn")}
	"#evalHelper" Map -> Bag {cons("Bag1EvalHelperSyn")}
	Value "," Values -> Values {cons("Values1ListSyn")}
	".Values" -> Values {cons("Values1Empty")}
	"Vars2SMTLib" "(" InsertDzSet ")" -> String {cons("String1364Syn")}
	"nothing" -> Value {cons("Value1449Syn")}
	"intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1268Syn")}
	"#freshVar" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K1305Syn")}
	"#rebind2" "(" InsertDzK "," InsertDzInt "," InsertDzMap "," InsertDzK ")" -> K {cons("K1353Syn")}
	"K2Sort" "(" InsertDzK ")" -> String {cons("String1377Syn")}
	"isLocalFreshVar" "(" InsertDzK ")" -> Bool {cons("Bool1307Syn")}
	"Int2Float" "(" InsertDzInt ")" -> Float {cons("Float190Syn")}
	"#fPutBytes" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1402Syn")}
	"isVariable" "(" InsertDzSet ")" -> Bool {cons("Bool1373Syn")}
	"locationValueVoid" -> LocationValue {cons("LocationValue1459Syn")}
	"isKLabelConstant" "(" InsertDzKLabel ")" -> Bool {cons("Bool1376Syn")}
	"contextBindAdd" "(" InsertDzId "," InsertDzValue ")" -> K {cons("K1479Syn")}
	"String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel1String2KLabelSyn")}
	"#freeVarsBinder2" "(" InsertDzK "," InsertDzK ")" -> K {cons("K1336Syn")}
	"method" InsertDzId "(" InsertDzIds ")" Cmd -> Ddecl {cons("Ddecl1447Syn")}
	Id -> Variable {}
	"#stderr" -> Int {cons("Int1406Syn")}
	"#getVarsFromK" "(" InsertDzK ")" -> Set {cons("Set1300Syn")}
	"#getSymLabel" "(" InsertDzString ")" -> K {cons("K1383Syn")}
	"String2Id" "(" InsertDzString ")" -> Id {cons("Id1207Syn")}
	Set "==Set" Set -> Bool {cons("Bool126Syn")}
	"send" InsertDzExp ";" -> Cmd {cons("Cmd1440Syn")}
	"Float2String" "(" InsertDzFloat ")" -> String {cons("String1202Syn")}
	Exp ";" -> Cmd {cons("Cmd1438Syn")}
	"messageClosure" "(" InsertDzExp ")" -> MessageClosure {cons("MessageClosure1488Syn")}
	"dummy-this-Variable-needed-only-to-declare-sort" -> Variable {cons("Variable1370Syn")}
	"Map2KLabel" Map -> KLabel {cons("KLabel1280Syn")}
	"(" InsertDzValue "," InsertDzMap "," InsertDzK ")" -> ListItem {cons("ListItem1456Syn")}
	String -> K {}
	Bag "=Bag" Bag -> Bool {cons("Bool143Syn")}
	"Consts2SMTLib" "(" InsertDzSet ")" -> String {cons("String1365Syn")}
	"store" "(" InsertDzArray "," InsertDzInt "," InsertDzK ")" -> Array {cons("Array175Syn")}
	"Set2KTermAcc" "(" InsertDzSet "," InsertDzK ")" -> K {cons("K1272Syn")}
	"isSymbolicBag" "(" InsertDzBag ")" -> K {cons("K1380Syn")}
	Map "[" "undef" "/" InsertDzKList "]" -> Map {cons("Map1253Syn")}
	"objectActivate" "(" InsertDzLocationValue ")" -> K {cons("K1482Syn")}
	"locationValue" "(" InsertDzInt ")" -> LocationValue {cons("LocationValue1458Syn")}
	"objectCreate" "(" InsertDzId "," InsertDzValues ")" -> K {cons("K1469Syn")}
	String "+String" String -> String {left, cons("String193Syn")}
	"Bag2KLabel" Bag -> KLabel {cons("KLabel1277Syn")}
	"#boundVars" "(" InsertDzK ")" -> K {cons("K1323Syn")}
	Int ">Int" Int -> Bool {left, cons("Bool168Syn")}
	"String2DotK" "(" InsertDzString ")" -> K {cons("K1403Syn")}
	"dummyChar" -> Char {cons("Char1233Syn")}
	"messageClosureCreate" "(" InsertDzExp ")" -> K {cons("K1489Syn")}
	"#freeVarsBinder" "(" InsertDzK "," InsertDzSet ")" -> K {cons("K1334Syn")}
	DzString -> String {}
	"#fPrintChar" "(" InsertDzInt "," InsertDzK ")" -> K {cons("K1427Syn")}
	"isSymbolicSet" "(" InsertDzSet ")" -> K {cons("K1379Syn")}
	"#binderSplit1" "(" InsertDzKLabel "," InsertDzInt "," InsertDzKList "," InsertDzKList "," InsertDzKList "," InsertDzSet ")" -> K {cons("K1326Syn")}
	"SMTLibQuery" "(" InsertDzBool ")" -> String {cons("String1366Syn")}
	"valueLoad" "(" InsertDzInt ")" -> K {cons("K1464Syn")}
	"isVariable" "(" InsertDzList ")" -> Bool {cons("Bool1372Syn")}
	"#counter" -> Int {cons("Int1248Syn")}
	"#convertToken" "(" InsertDzString "," InsertDzString ")" -> List {cons("List1429Syn")}
	"List2KLabel" List -> KLabel {cons("KLabel1279Syn")}
	"#rebind" "(" InsertDzK "," InsertDzK "," InsertDzK "," InsertDzK ")" -> K {cons("K1348Syn")}
	"#hasMapping" "(" InsertDzMap "," InsertDzK ")" -> Bool {cons("Bool1259Syn")}
	"CellLabel2KLabel" CellLabel -> KLabel {cons("KLabel1275Syn")}
	"isToken" "(" InsertDzK ")" -> K {cons("K1293Syn")}
	Map "<=Map" Map -> Bool {cons("Bool128Syn")}
	"#freezer" K -> KLabel {cons("KLabel1292Syn")}
	"#patternMatch" "(" InsertDzKList "," InsertDzKList ")" -> K {cons("K1297Syn")}
	"var" InsertDzExp ":=" InsertDzValue ";" -> Ddecl {cons("Ddecl1446Syn")}
	"#substituteBinder2" "(" InsertDzK "," InsertDzMap "," InsertDzK "," InsertDzK ")" -> K {cons("K1347Syn")}
	"#istream" "(" InsertDzInt ")" -> List {cons("List1InputStreamSyn")}
	"#peekByte" "(" ")" -> K {cons("K1408Syn")}
	"#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1394Syn")}
	"isBounding" "(" InsertDzKLabel "," InsertDzInt ")" -> Bool {cons("Bool1309Syn")}
	"#substituteBinder1" "(" InsertDzK "," InsertDzMap "," InsertDzK "," InsertDzK ")" -> K {cons("K1346Syn")}
	"lookupM" "(" InsertDzMap "," InsertDzId ")" -> K {cons("K1476Syn")}
	"forall" InsertDzSet "." Bool -> Bool {cons("Bool1360Syn")}
	"init" -> Id {cons("Id1433Syn")}
	"String2Bool" "(" InsertDzString ")" -> K {cons("K1396Syn")}
	"getKLabel" K -> KLabel {cons("KLabel1282Syn")}
	"substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String198Syn")}
	"#readByte" "(" ")" -> K {cons("K1407Syn")}
	"#EOF" -> TCPAnswer {cons("TCPAnswer1238Syn")}
	Set "<=Set" Set -> Bool {cons("Bool125Syn")}
	"#substitutePlainList" "(" InsertDzK "," InsertDzMap ")" -> K {cons("K1356Syn")}
	"Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int192Syn")}
	"#substituteFV" "(" InsertDzK "," InsertDzMap "," InsertDzK ")" -> K {cons("K1342Syn")}
	"programLoaded" "(" InsertDzK ")" -> K {cons("K1474Syn")}
	"maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int163Syn")}
	Set "-Set" Set -> Set {cons("Set1264Syn")}
	"contextEnter" "(" InsertDzLocationValue "," InsertDzK ")" -> K {cons("K1477Syn")}
	DzInt -> Int {}
	"#getVars" "(" InsertDzK ")" -> K {cons("K1303Syn")}
	Int "dividesInt" Int -> Bool {cons("Bool173Syn")}
	"freeVariables" "(" InsertDzKList ")" -> Set {cons("Set1328Syn")}
	String "=/=String" String -> Bool {left, cons("Bool1227Syn")}
	"#retrieveTCPError" "(" InsertDzString ")" -> String {cons("String1244Syn")}
	"objectState" "(" InsertDzInt ")" -> ObjectState {cons("ObjectState1484Syn")}
	"#checkTCPAnswer" "(" InsertDzString ")" -> TCPAnswer {cons("TCPAnswer1242Syn")}
	"#distinctCounter" "(" InsertDzInt ")" -> Int {cons("Int1247Syn")}
	"Id2String" "(" InsertDzId ")" -> String {cons("String1206Syn")}
	Exp ":=" InsertDzExp ";" -> Cmd {cons("Cmd1439Syn")}
	String -> TCPAnswer {}
	String "<String" String -> Bool {cons("Bool1228Syn")}
	"#freshSymSortN" "(" InsertDzString "," InsertDzInt ")" -> K {cons("K1384Syn")}
	Value -> Exp {}
	"#freeVars" "(" InsertDzKList ")" -> K {cons("K1330Syn")}
	"location" "(" InsertDzInt ")" -> Location {cons("Location1457Syn")}
	"programDone" -> K {cons("K1492Syn")}
	"ltrim" "(" InsertDzString ")" -> String {cons("String1225Syn")}
	"#freeVars1" "(" InsertDzKList "," InsertDzK "," InsertDzSet "," InsertDzSet ")" -> K {cons("K1333Syn")}
	String "<=String" String -> Bool {cons("Bool1229Syn")}
	"countAllOccurences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1223Syn")}
	KList "=KList" KList -> Bool {cons("Bool145Syn")}
	"dummy" "(" InsertDzKList ")" -> K {cons("K133Syn")}
	"KLabel2K" KLabel -> K {cons("K1283Syn")}
	String -> Value {}
	"#substituteList" "(" InsertDzK "," InsertDzMap "," InsertDzK ")" -> K {cons("K1343Syn")}
	"replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1222Syn")}
	"#isWhiteSpace" "(" InsertDzChar ")" -> Bool {cons("Bool1234Syn")}
	String ">=String" String -> Bool {cons("Bool1232Syn")}
	KLabel "=/=KLabel" KLabel -> Bool {cons("Bool136Syn")}
	DzId -> Id {}
	"#charString" "(" InsertDzK ")" -> K {cons("K1425Syn")}
	"trim" "(" InsertDzString ")" -> String {cons("String1224Syn")}
	"objectDeactivate" "(" InsertDzLocationValue ")" -> K {cons("K1483Syn")}
	"randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1246Syn")}
	"#getMapFromK" "(" InsertDzK ")" -> Map {cons("Map1263Syn")}
	"KLabel2KLabel" KLabel -> KLabel {cons("KLabel1274Syn")}
	"isMatching" "(" InsertDzKList "," InsertDzKList ")" -> Bool {cons("Bool1294Syn")}
	"#substituteList1" "(" InsertDzK "," InsertDzMap "," InsertDzK "," InsertDzKList ")" -> K {cons("K1344Syn")}
	"return" InsertDzExp ";" -> Cmd {cons("Cmd1442Syn")}
	"#map" "(" InsertDzMap ")" -> K {cons("K1260Syn")}
	"#fEof" "(" InsertDzInt ")" -> K {cons("K1392Syn")}
	"programInit" -> K {cons("K1460Syn")}
	"#substitutePlain" "(" InsertDzK "," InsertDzMap ")" -> K {cons("K1355Syn")}
	"objectPush" "(" InsertDzLocationValue ")" -> K {cons("K1470Syn")}
	"halt" ";" -> Cmd {cons("Cmd1443Syn")}
	"freeVariables" "(" InsertDzSet ")" -> Set {cons("Set1329Syn")}
	"#rebind1" "(" InsertDzK "," InsertDzK ")" -> K {cons("K1352Syn")}
	"String2Float" "(" InsertDzString ")" -> Float {cons("Float1203Syn")}
	"valueAlloc" "(" InsertDzValue ")" -> K {cons("K1462Syn")}
	"#close" "(" InsertDzInt ")" -> K {cons("K1390Syn")}
	Map "[" InsertDzMap "]" -> Map {cons("Map1UpdateMapWithMapSyn")}
	Cmds Cmds -> Cmds {right, cons("Cmds1444Syn")}
	"class" "(" InsertDzIds "," InsertDzCmds ")" -> K {cons("K1453Syn")}
	"this" -> K {cons("K1480Syn")}
	ObjectState -> Value {}
	Exp "." Id -> Exp {cons("Exp1434Syn")}
	Int "=Int" Int -> Bool {cons("Bool172Syn")}
	SetItem "in" Set -> Bool {cons("Bool1266Syn")}
	"#freshVar1" "(" InsertDzSet "," InsertDzK ")" -> K {cons("K1306Syn")}
	Float -> K {}
	"messageDone" -> K {cons("K1486Syn")}
	Object -> Value {}
	Map "[" InsertDzKList "/" InsertDzKList "]" -> Map {cons("Map1255Syn")}
	KResult -> K {}
	"values" Map -> Set {cons("Set1257Syn")}
	Id "," Ids -> Ids {cons("Ids1ListSyn")}
	".Ids" -> Ids {cons("Ids1Empty")}
	"valueStore" "(" InsertDzInt "," InsertDzK ")" -> K {cons("K1463Syn")}
	"replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1220Syn")}
	Method -> Value {}
	"KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String1208Syn")}
	KList "==KList" KList -> Bool {cons("Bool132Syn")}
	K "#inSet" Set -> Bool {cons("Bool1267Syn")}
	"replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1209Syn")}
	Exp "(" InsertDzExps ")" -> Exp {cons("Exp1435Syn")}
	"Set2K" Set -> K {cons("K1286Syn")}
	"#binderSplit" "(" InsertDzK ")" -> K {cons("K1325Syn")}
	"#stdin" -> Int {cons("Int1404Syn")}
	K "inKList" KList -> Bool {cons("Bool1249Syn")}
	LocationValue -> Value {}
	"rtrim" "(" InsertDzString ")" -> String {cons("String1226Syn")}
	"List2K" List -> K {cons("K1288Syn")}
	Cmd -> Cmds {}
	"isSymbolicMap" "(" InsertDzMap ")" -> K {cons("K1382Syn")}
	"findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int199Syn")}
	"#reopen" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1389Syn")}
	"$hasMapping" "(" InsertDzMap "," InsertDzK ")" -> Bool {cons("Bool1258Syn")}
	"methodClosure" "(" InsertDzBag ")" -> Method {cons("Method1455Syn")}
	Float -> InsertDzFloat
	Values -> InsertDzValues
	Bag -> InsertDzBag
	Cmds -> InsertDzCmds
	Value -> InsertDzValue
	KList -> InsertDzKList
	Bool -> InsertDzBool
	LocationValue -> InsertDzLocationValue
	Map -> InsertDzMap
	Array -> InsertDzArray
	Char -> InsertDzChar
	K -> InsertDzK
	Exp -> InsertDzExp
	String -> InsertDzString
	KLabel -> InsertDzKLabel
	Id -> InsertDzId
	Set -> InsertDzSet
	List -> InsertDzList
	Int -> InsertDzInt
	Ids -> InsertDzIds
	Exps -> InsertDzExps

	"(" K ")" ":" "Bool"      -> K            {cons("Bool1Cast")}
	"(" K ")" "::" "Bool"     -> K            {cons("Bool12Cast")}
	"(" K ")" ":" "Method"      -> K            {cons("Method1Cast")}
	"(" K ")" "::" "Method"     -> K            {cons("Method12Cast")}
	"(" K ")" ":" "LocationValue"      -> K            {cons("LocationValue1Cast")}
	"(" K ")" "::" "LocationValue"     -> K            {cons("LocationValue12Cast")}
	"(" K ")" ":" "Decl"      -> K            {cons("Ddecl1Cast")}
	"(" K ")" "::" "Decl"     -> K            {cons("Ddecl12Cast")}
	"(" K ")" ":" "#Id"      -> K            {cons("DzId1Cast")}
	"(" K ")" "::" "#Id"     -> K            {cons("DzId12Cast")}
	"(" K ")" ":" "Cmd"      -> K            {cons("Cmd1Cast")}
	"(" K ")" "::" "Cmd"     -> K            {cons("Cmd12Cast")}
	"(" K ")" ":" "Array"      -> K            {cons("Array1Cast")}
	"(" K ")" "::" "Array"     -> K            {cons("Array12Cast")}
	"(" K ")" ":" "CapitalizedId"      -> K            {cons("CapitalizedId1Cast")}
	"(" K ")" "::" "CapitalizedId"     -> K            {cons("CapitalizedId12Cast")}
	"(" K ")" ":" "Module"      -> K            {cons("Module1Cast")}
	"(" K ")" "::" "Module"     -> K            {cons("Module12Cast")}
	"(" K ")" ":" "MessageClosure"      -> K            {cons("MessageClosure1Cast")}
	"(" K ")" "::" "MessageClosure"     -> K            {cons("MessageClosure12Cast")}
	"(" K ")" ":" "#Float"      -> K            {cons("DzFloat1Cast")}
	"(" K ")" "::" "#Float"     -> K            {cons("DzFloat12Cast")}
	"(" K ")" ":" "TCPAnswer"      -> K            {cons("TCPAnswer1Cast")}
	"(" K ")" "::" "TCPAnswer"     -> K            {cons("TCPAnswer12Cast")}
	"(" K ")" ":" "#String"      -> K            {cons("DzString1Cast")}
	"(" K ")" "::" "#String"     -> K            {cons("DzString12Cast")}
	"(" K ")" ":" "Exp"      -> K            {cons("Exp1Cast")}
	"(" K ")" "::" "Exp"     -> K            {cons("Exp12Cast")}
	"(" K ")" ":" "#Int"      -> K            {cons("DzInt1Cast")}
	"(" K ")" "::" "#Int"     -> K            {cons("DzInt12Cast")}
	"(" K ")" ":" "Int"      -> K            {cons("Int1Cast")}
	"(" K ")" "::" "Int"     -> K            {cons("Int12Cast")}
	"(" K ")" ":" "Ids"      -> K            {cons("Ids1Cast")}
	"(" K ")" "::" "Ids"     -> K            {cons("Ids12Cast")}
	"(" K ")" ":" "#Bool"      -> K            {cons("DzBool1Cast")}
	"(" K ")" "::" "#Bool"     -> K            {cons("DzBool12Cast")}
	"(" K ")" ":" "StoreValue"      -> K            {cons("StoreValue1Cast")}
	"(" K ")" "::" "StoreValue"     -> K            {cons("StoreValue12Cast")}
	"(" K ")" ":" "Object"      -> K            {cons("Object1Cast")}
	"(" K ")" "::" "Object"     -> K            {cons("Object12Cast")}
	"(" K ")" ":" "Exps"      -> K            {cons("Exps1Cast")}
	"(" K ")" "::" "Exps"     -> K            {cons("Exps12Cast")}
	"(" K ")" ":" "Values"      -> K            {cons("Values1Cast")}
	"(" K ")" "::" "Values"     -> K            {cons("Values12Cast")}
	"(" K ")" ":" "Float"      -> K            {cons("Float1Cast")}
	"(" K ")" "::" "Float"     -> K            {cons("Float12Cast")}
	"(" K ")" ":" "Nat"      -> K            {cons("Nat1Cast")}
	"(" K ")" "::" "Nat"     -> K            {cons("Nat12Cast")}
	"(" K ")" ":" "Cmds"      -> K            {cons("Cmds1Cast")}
	"(" K ")" "::" "Cmds"     -> K            {cons("Cmds12Cast")}
	"(" K ")" ":" "Value"      -> K            {cons("Value1Cast")}
	"(" K ")" "::" "Value"     -> K            {cons("Value12Cast")}
	"(" K ")" ":" "Variable"      -> K            {cons("Variable1Cast")}
	"(" K ")" "::" "Variable"     -> K            {cons("Variable12Cast")}
	"(" K ")" ":" "Location"      -> K            {cons("Location1Cast")}
	"(" K ")" "::" "Location"     -> K            {cons("Location12Cast")}
	"(" K ")" ":" "Char"      -> K            {cons("Char1Cast")}
	"(" K ")" "::" "Char"     -> K            {cons("Char12Cast")}
	"(" K ")" ":" "ObjectState"      -> K            {cons("ObjectState1Cast")}
	"(" K ")" "::" "ObjectState"     -> K            {cons("ObjectState12Cast")}
	"(" K ")" ":" "String"      -> K            {cons("String1Cast")}
	"(" K ")" "::" "String"     -> K            {cons("String12Cast")}
	"(" K ")" ":" "Id"      -> K            {cons("Id1Cast")}
	"(" K ")" "::" "Id"     -> K            {cons("Id12Cast")}


	DzDzString		-> DzString	{cons("DzString1Const")}
	DzDzInt		-> DzInt	{cons("DzInt1Const")}
	DzDzId		-> DzId	{cons("DzId1Const")}
	DzKLabel		-> KLabel	{cons("KLabel1Const")}
	DzDzBool		-> DzBool	{cons("DzBool1Const")}
	DzDzFloat		-> DzFloat	{cons("DzFloat1Const")}

	DzDzINT		-> DzDzInt
	DzDzID		-> DzDzId
	DzDzSTRING	-> DzDzString
	DzDzFLOAT	-> DzDzFloat

lexical syntax
	"isKResult" -> DzKLabel
	"#symEqualitySort" -> DzKLabel
	"true" -> DzDzBool
	"#token" -> DzKLabel
	"false" -> DzDzBool
	"isBinder" -> DzKLabel
	"wrap-with" -> DzKLabel
	"#set" -> DzKLabel
	"'#andBool" -> DzKLabel
	"isSet" -> DzKLabel


%% sort predicates
	"isBag"      -> DzKLabel
	"isSymbolicBag"      -> DzKLabel
	"#symBag"      -> DzKLabel
	"isBool"      -> DzKLabel
	"isSymbolicBool"      -> DzKLabel
	"#symBool"      -> DzKLabel
	"isMethod"      -> DzKLabel
	"isSymbolicMethod"      -> DzKLabel
	"#symMethod"      -> DzKLabel
	"isLocationValue"      -> DzKLabel
	"isSymbolicLocationValue"      -> DzKLabel
	"#symLocationValue"      -> DzKLabel
	"isDecl"      -> DzKLabel
	"isSymbolicDecl"      -> DzKLabel
	"#symDecl"      -> DzKLabel
	"is#Id"      -> DzKLabel
	"isSymbolic#Id"      -> DzKLabel
	"#sym#Id"      -> DzKLabel
	"isCmd"      -> DzKLabel
	"isSymbolicCmd"      -> DzKLabel
	"#symCmd"      -> DzKLabel
	"isArray"      -> DzKLabel
	"isSymbolicArray"      -> DzKLabel
	"#symArray"      -> DzKLabel
	"isCapitalizedId"      -> DzKLabel
	"isSymbolicCapitalizedId"      -> DzKLabel
	"#symCapitalizedId"      -> DzKLabel
	"isListItem"      -> DzKLabel
	"isSymbolicListItem"      -> DzKLabel
	"#symListItem"      -> DzKLabel
	"isModule"      -> DzKLabel
	"isSymbolicModule"      -> DzKLabel
	"#symModule"      -> DzKLabel
	"isMessageClosure"      -> DzKLabel
	"isSymbolicMessageClosure"      -> DzKLabel
	"#symMessageClosure"      -> DzKLabel
	"isKResult"      -> DzKLabel
	"isSymbolicKResult"      -> DzKLabel
	"#symKResult"      -> DzKLabel
	"is#Float"      -> DzKLabel
	"isSymbolic#Float"      -> DzKLabel
	"#sym#Float"      -> DzKLabel
	"isK"      -> DzKLabel
	"isSymbolicK"      -> DzKLabel
	"#symK"      -> DzKLabel
	"isTCPAnswer"      -> DzKLabel
	"isSymbolicTCPAnswer"      -> DzKLabel
	"#symTCPAnswer"      -> DzKLabel
	"is#String"      -> DzKLabel
	"isSymbolic#String"      -> DzKLabel
	"#sym#String"      -> DzKLabel
	"isExp"      -> DzKLabel
	"isSymbolicExp"      -> DzKLabel
	"#symExp"      -> DzKLabel
	"is#Int"      -> DzKLabel
	"isSymbolic#Int"      -> DzKLabel
	"#sym#Int"      -> DzKLabel
	"isSet"      -> DzKLabel
	"isSymbolicSet"      -> DzKLabel
	"#symSet"      -> DzKLabel
	"isInt"      -> DzKLabel
	"isSymbolicInt"      -> DzKLabel
	"#symInt"      -> DzKLabel
	"isList"      -> DzKLabel
	"isSymbolicList"      -> DzKLabel
	"#symList"      -> DzKLabel
	"isIds"      -> DzKLabel
	"isSymbolicIds"      -> DzKLabel
	"#symIds"      -> DzKLabel
	"is#Bool"      -> DzKLabel
	"isSymbolic#Bool"      -> DzKLabel
	"#sym#Bool"      -> DzKLabel
	"isStoreValue"      -> DzKLabel
	"isSymbolicStoreValue"      -> DzKLabel
	"#symStoreValue"      -> DzKLabel
	"isObject"      -> DzKLabel
	"isSymbolicObject"      -> DzKLabel
	"#symObject"      -> DzKLabel
	"isExps"      -> DzKLabel
	"isSymbolicExps"      -> DzKLabel
	"#symExps"      -> DzKLabel
	"isValues"      -> DzKLabel
	"isSymbolicValues"      -> DzKLabel
	"#symValues"      -> DzKLabel
	"isFloat"      -> DzKLabel
	"isSymbolicFloat"      -> DzKLabel
	"#symFloat"      -> DzKLabel
	"isNat"      -> DzKLabel
	"isSymbolicNat"      -> DzKLabel
	"#symNat"      -> DzKLabel
	"isCmds"      -> DzKLabel
	"isSymbolicCmds"      -> DzKLabel
	"#symCmds"      -> DzKLabel
	"isValue"      -> DzKLabel
	"isSymbolicValue"      -> DzKLabel
	"#symValue"      -> DzKLabel
	"isKList"      -> DzKLabel
	"isSymbolicKList"      -> DzKLabel
	"#symKList"      -> DzKLabel
	"isVariable"      -> DzKLabel
	"isSymbolicVariable"      -> DzKLabel
	"#symVariable"      -> DzKLabel
	"isMap"      -> DzKLabel
	"isSymbolicMap"      -> DzKLabel
	"#symMap"      -> DzKLabel
	"isLocation"      -> DzKLabel
	"isSymbolicLocation"      -> DzKLabel
	"#symLocation"      -> DzKLabel
	"isChar"      -> DzKLabel
	"isSymbolicChar"      -> DzKLabel
	"#symChar"      -> DzKLabel
	"isObjectState"      -> DzKLabel
	"isSymbolicObjectState"      -> DzKLabel
	"#symObjectState"      -> DzKLabel
	"isString"      -> DzKLabel
	"isSymbolicString"      -> DzKLabel
	"#symString"      -> DzKLabel
	"isKLabel"      -> DzKLabel
	"isSymbolicKLabel"      -> DzKLabel
	"#symKLabel"      -> DzKLabel
	"isId"      -> DzKLabel
	"isSymbolicId"      -> DzKLabel
	"#symId"      -> DzKLabel



%% terminals reject
	"Celllabel2K" -> VARID {reject}
	"String2KLabel" -> VARID {reject}
	"List2K" -> VARID {reject}
	"K2Sort" -> VARID {reject}
	"Float2Int" -> VARID {reject}
	"KList2K" -> VARID {reject}
	"Vars2SMTLib" -> VARID {reject}
	"Set2KTerm" -> VARID {reject}
	"KList2KLabel" -> VARID {reject}
	"Map2K" -> VARID {reject}
	"K2SMTLib" -> VARID {reject}
	"String2DotK" -> VARID {reject}
	"Consts2SMTLib" -> VARID {reject}
	"Set2K" -> VARID {reject}
	"String2Int" -> VARID {reject}
	"Int2String" -> VARID {reject}
	"Map2KLabel" -> VARID {reject}
	"SMTLibQuery" -> VARID {reject}
	"String2Float" -> VARID {reject}
	"List2KLabel" -> VARID {reject}
	"String2Bool" -> VARID {reject}
	"String2Id" -> VARID {reject}
	"KLabel2K" -> VARID {reject}
	"Float2String" -> VARID {reject}
	"KLabel2String" -> VARID {reject}
	"Bag2KLabel" -> VARID {reject}
	"Bag2K" -> VARID {reject}
	"SMTCall" -> VARID {reject}
	"KLabel2KLabel" -> VARID {reject}
	"Set2KTermAcc" -> VARID {reject}
	"Id2String" -> VARID {reject}
	"Map" -> VARID {reject}
	"Int2Float" -> VARID {reject}
	"CellLabel2KLabel" -> VARID {reject}
	"Set2KLabel" -> VARID {reject}


	"locationValue" -> DzDzID {reject}
	"store" -> DzDzID {reject}
	"lengthString" -> DzDzID {reject}
	"Celllabel2K" -> DzDzID {reject}
	"andThenBool" -> DzDzID {reject}
	"String2KLabel" -> DzDzID {reject}
	"countAllOccurences" -> DzDzID {reject}
	"List2K" -> DzDzID {reject}
	"K2Sort" -> DzDzID {reject}
	"dummyChar" -> DzDzID {reject}
	"intersectSet" -> DzDzID {reject}
	"orBool" -> DzDzID {reject}
	"Float2Int" -> DzDzID {reject}
	"isSymbolicMap" -> DzDzID {reject}
	"inKList" -> DzDzID {reject}
	"dummy" -> DzDzID {reject}
	"replaceAll" -> DzDzID {reject}
	"undef" -> DzDzID {reject}
	"valueStore" -> DzDzID {reject}
	"charString" -> DzDzID {reject}
	"isKLabelConstant" -> DzDzID {reject}
	"dummyNat" -> DzDzID {reject}
	"methodParamsBind" -> DzDzID {reject}
	"valueLoad" -> DzDzID {reject}
	"isSymbolicSet" -> DzDzID {reject}
	"valueAlloc" -> DzDzID {reject}
	"replaceFirst" -> DzDzID {reject}
	"contextBindAdd" -> DzDzID {reject}
	"xorBool" -> DzDzID {reject}
	"contextEnter" -> DzDzID {reject}
	"KList2K" -> DzDzID {reject}
	"keys" -> DzDzID {reject}
	"isToken" -> DzDzID {reject}
	"isSymbolicBag" -> DzDzID {reject}
	"replace" -> DzDzID {reject}
	"new" -> DzDzID {reject}
	"Vars2SMTLib" -> DzDzID {reject}
	"nothing" -> DzDzID {reject}
	"exists" -> DzDzID {reject}
	"Set2KTerm" -> DzDzID {reject}
	"KList2KLabel" -> DzDzID {reject}
	"Map2K" -> DzDzID {reject}
	"getMatching" -> DzDzID {reject}
	"root" -> DzDzID {reject}
	"orElseBool" -> DzDzID {reject}
	"programEval" -> DzDzID {reject}
	"K2SMTLib" -> DzDzID {reject}
	"isMatching" -> DzDzID {reject}
	"String2DotK" -> DzDzID {reject}
	"Consts2SMTLib" -> DzDzID {reject}
	"values" -> DzDzID {reject}
	"decomposeMatching" -> DzDzID {reject}
	"isSet" -> DzDzID {reject}
	"objectBindAdd" -> DzDzID {reject}
	"select" -> DzDzID {reject}
	"init" -> DzDzID {reject}
	"isKResult" -> DzDzID {reject}
	"vars" -> DzDzID {reject}
	"programLoaded" -> DzDzID {reject}
	"objectCreate" -> DzDzID {reject}
	"Set2K" -> DzDzID {reject}
	"String2Int" -> DzDzID {reject}
	"Int2String" -> DzDzID {reject}
	"isSymbolicList" -> DzDzID {reject}
	"Map2KLabel" -> DzDzID {reject}
	"var" -> DzDzID {reject}
	"SMTLibQuery" -> DzDzID {reject}
	"objectDeactivate" -> DzDzID {reject}
	"checkSat" -> DzDzID {reject}
	"String2Float" -> DzDzID {reject}
	"isBounding" -> DzDzID {reject}
	"methodClosure" -> DzDzID {reject}
	"trim" -> DzDzID {reject}
	"minInt" -> DzDzID {reject}
	"messageClosure" -> DzDzID {reject}
	"lengthList" -> DzDzID {reject}
	"divInt" -> DzDzID {reject}
	"objectInterfaceAdd" -> DzDzID {reject}
	"rfindString" -> DzDzID {reject}
	"contextLeave" -> DzDzID {reject}
	"inVars" -> DzDzID {reject}
	"halt" -> DzDzID {reject}
	"objectPush" -> DzDzID {reject}
	"isBuiltin" -> DzDzID {reject}
	"absInt" -> DzDzID {reject}
	"getKLabel" -> DzDzID {reject}
	"List2KLabel" -> DzDzID {reject}
	"String2Bool" -> DzDzID {reject}
	"lookup" -> DzDzID {reject}
	"String2Id" -> DzDzID {reject}
	"substrString" -> DzDzID {reject}
	"false" -> DzDzID {reject}
	"KLabel2K" -> DzDzID {reject}
	"messageClosureCreate" -> DzDzID {reject}
	"freeVariables" -> DzDzID {reject}
	"Float2String" -> DzDzID {reject}
	"getVariables" -> DzDzID {reject}
	"KLabel2String" -> DzDzID {reject}
	"maxInt" -> DzDzID {reject}
	"Bag2KLabel" -> DzDzID {reject}
	"Bag2K" -> DzDzID {reject}
	"isVariable" -> DzDzID {reject}
	"module" -> DzDzID {reject}
	"impliesBool" -> DzDzID {reject}
	"contextsInit" -> DzDzID {reject}
	"return" -> DzDzID {reject}
	"true" -> DzDzID {reject}
	"isBinder" -> DzDzID {reject}
	"objectClosure" -> DzDzID {reject}
	"SMTCall" -> DzDzID {reject}
	"freshVariables" -> DzDzID {reject}
	"method" -> DzDzID {reject}
	"send" -> DzDzID {reject}
	"location" -> DzDzID {reject}
	"programParse" -> DzDzID {reject}
	"locationValueVoid" -> DzDzID {reject}
	"messageDone" -> DzDzID {reject}
	"KLabel2KLabel" -> DzDzID {reject}
	"dividesInt" -> DzDzID {reject}
	"Set2KTermAcc" -> DzDzID {reject}
	"Id2String" -> DzDzID {reject}
	"Map" -> DzDzID {reject}
	"class" -> DzDzID {reject}
	"Int2Float" -> DzDzID {reject}
	"objectBindAddAll" -> DzDzID {reject}
	"forall" -> DzDzID {reject}
	"notBool" -> DzDzID {reject}
	"objectStateAdd" -> DzDzID {reject}
	"modInt" -> DzDzID {reject}
	"CellLabel2KLabel" -> DzDzID {reject}
	"this" -> DzDzID {reject}
	"isLocalFreshVar" -> DzDzID {reject}
	"andBool" -> DzDzID {reject}
	"programDone" -> DzDzID {reject}
	"isEmptySet" -> DzDzID {reject}
	"isBound" -> DzDzID {reject}
	"fresh" -> DzDzID {reject}
	"findString" -> DzDzID {reject}
	"asciiString" -> DzDzID {reject}
	"ltrim" -> DzDzID {reject}
	"rtrim" -> DzDzID {reject}
	"inferSRP" -> DzDzID {reject}
	"in" -> DzDzID {reject}
	"xorInt" -> DzDzID {reject}
	"Set2KLabel" -> DzDzID {reject}
	"objectActivate" -> DzDzID {reject}
	"objectState" -> DzDzID {reject}
	"objectPop" -> DzDzID {reject}
	"programInit" -> DzDzID {reject}
	"randomRandom" -> DzDzID {reject}
	"lookupM" -> DzDzID {reject}

lexical restrictions
	%% follow restrictions
	"=" -/- [K].[L].[i].[s].[t]
	"Set2K" -/- [T].[e].[r].[m]
	"=K" -/- [L].[a].[b].[e].[l]
	"#substitute" -/- [K]
	"#substitute" -/- [L].[i].[s].[t].[\1]
	"=" -/- [B].[a].[g]
	"KList2K" -/- [L].[a].[b].[e].[l]
	"#freshSymSort" -/- [N]
	"#substitute" -/- [B].[i].[n].[d].[e].[r].[\1]
	"Map2K" -/- [L].[a].[b].[e].[l]
	"dummy" -/- [C].[h].[a].[r]
	"=" -/- [K]
	"#substitute" -/- [B].[i].[n].[d].[e].[r].[\2]
	"#substitutePlain" -/- [L].[i].[s].[t]
	"objectState" -/- [A].[d].[d]
	"lookup" -/- [M]
	"=" -/- [M].[a].[p]
	"Set2KTerm" -/- [A].[c].[c]
	"objectBindAdd" -/- [A].[l].[l]
	"#freshSym" -/- [S].[o].[r].[t].[N]
	"#parse" -/- [T].[o].[k].[e].[n]
	"messageClosure" -/- [C].[r].[e].[a].[t].[e]
	"Set2K" -/- [L].[a].[b].[e].[l]
	"=K" -/- [L].[i].[s].[t]
	"KLabel2K" -/- [L].[a].[b].[e].[l]
	"#substitute" -/- [P].[l].[a].[i].[n]
	"replace" -/- [F].[i].[r].[s].[t]
	"#eval" -/- [H].[e].[l].[p].[e].[r]
	"Bag2K" -/- [L].[a].[b].[e].[l]
	"/" -/- [I].[n].[t]
	"locationValue" -/- [V].[o].[i].[d]
	"#getVars" -/- [F].[r].[o].[m].[K]
	"Set2K" -/- [T].[e].[r].[m].[A].[c].[c]
	"method" -/- [C].[l].[o].[s].[u].[r].[e]
	"#substitute" -/- [P].[l].[a].[i].[n].[L].[i].[s].[t].[\1]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r].[\2]
	"method" -/- [P].[a].[r].[a].[m].[s].[B].[i].[n].[d]
	"#freshSym" -/- [S].[o].[r].[t]
	"dummy" -/- [N].[a].[t]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r].[\1]
	"==K" -/- [L].[i].[s].[t]
	"fresh" -/- [V].[a].[r].[i].[a].[b].[l].[e].[s]
	"=/=K" -/- [L].[a].[b].[e].[l]
	"=/=K" -/- [L].[i].[s].[t]
	"#" -/- [E].[O].[F]
	"#freshSym" -/- [N]
	"=" -/- [K].[L].[a].[b].[e].[l]
	"in" -/- [K].[L].[i].[s].[t]
	"/" -/- [F].[l].[o].[a].[t]
	"#substitute" -/- [L].[i].[s].[t]
	"#substitute" -/- [F].[V]
	"in" -/- [V].[a].[r].[s]
	"#substitute" -/- [B].[i].[n].[d].[e].[r]
	"=" -/- [I].[n].[t]
	"#substitutePlain" -/- [L].[i].[s].[t].[\1]
	"#freeVars" -/- [B].[i].[n].[d].[e].[r]
	"#substitute" -/- [P].[l].[a].[i].[n].[L].[i].[s].[t]
	"=" -/- [L].[i].[s].[t]
	"location" -/- [V].[a].[l].[u].[e]
	"replace" -/- [A].[l].[l]
	"location" -/- [V].[a].[l].[u].[e].[V].[o].[i].[d]
	"List2K" -/- [L].[a].[b].[e].[l]
	"==K" -/- [L].[a].[b].[e].[l]
	"=" -/- [S].[e].[t]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
	DzDzId  -/- [a-zA-Z0-9]
	DzDzInt -/- [0-9]
	"is" -/- [\#A-Z]

lexical syntax
context-free syntax


context-free restrictions
	"#" -/- [s].[y].[m]
